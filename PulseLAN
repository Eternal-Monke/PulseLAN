#!/usr/bin/env python3

import socket
import threading
import time

BROADCAST_PORT = 53482

###################################################
######## THIS FUNCTION GETS OUR IP ADDRESS ########
###################################################

# First we set up a socket and attempt to connect
# to ip address 8.8.8.8 (doesnt matter if we 
# actually connect or not).

# We then get our own IP address and return that
# if there exists any error, we return a default
# value and close the socket at the end.
def get_Ip():
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]
    except Exception:
        return "192.168.0.1"
    finally:
        s.close()


###################################################
########  THIS FUNCTION LISTENS FOR PEERS  ########
###################################################

# We first set up a UDP socket and send a broadcast
# to all devices in the network

# When we find someone, we then get the recieved
# data and add it to the all_peers dict if it is a
# new peer, if not, we will interperate it as a
# message and print the message to the terminal.
def listen_for_peers():
    global peers_index
    peers_index = 0

    listen_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    listen_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    listen_sock.bind(('', BROADCAST_PORT))

    while True:
        data, addr = listen_sock.recvfrom(1024)
        info = data.decode()
        if '|' in info:
            try:
                _, peer_ip = info.split('|')
                if (peer_ip != ip) and (peer_ip not in [extract_ip.split('|')[1] for extract_ip in all_peers.values()]):
                    peers_index += 1
                    all_peers[peers_index] = info
            except ValueError:
                with print_lock:
                    print(f"Received malformed discovery: {info}")
        else:
            with print_lock:
                print(f"\nðŸ“¨ Message from {addr[0]}: {info}")


###################################################
########  THIS FUNCTION SENDS A BROADCAST  ########
###################################################

# It's just a while loop that keeps sending a
# broadcast every 3 seconds.
def periodic_broadcast(name, ip, sock):
    while True:
        message = f"{name}|{ip}"
        sock.sendto(message.encode(), ('<broadcast>', BROADCAST_PORT))
        time.sleep(3)

###################################################
########     THIS IS THE MAIN FUNCTION     ########
###################################################

# We first get the users name and IP, we then start
# a socket and create a message which we will then
# encode it and broadcast to the broadcast address
# of the network. We are given the option to
# message a peer or to list all of the peers.
if __name__ == "__main__":
    name = input("Enter your name: ")
    ip = get_Ip()

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    print_lock = threading.Lock()

    bcast_thread = threading.Thread(target=periodic_broadcast, args=(name, ip, sock), daemon=True)
    bcast_thread.start()

    print(f"\033[35mBroadcasted:\033[0m '{name} \033[1m@\033[0m {ip}'")
    all_peers = {}

    listener_thread = threading.Thread(target=listen_for_peers, daemon=True)
    listener_thread.start()

    while True:
        with print_lock:
            print()
            cmd = input("\033[1;34m-- Type the number of a peer to message, or enter 'list' or 'l' to see peers --\033[0m\n> ").strip().lower()
            if (cmd == "list") or (cmd == 'l'):
                for number, value in all_peers.items():
                    ip_, name_ = value.split('|')
                    print(f"\033[92;1m{number}\033[0m) {ip_} \033[1m@\033[0m {name_}")
            else:
                try:
                    if int(cmd) in all_peers:
                        peer_info = all_peers[int(cmd)]
                        peer_name, peer_ip = peer_info.split('|')
                        text = input("\033[94mEnter message:\033[0m ")
                        msg = f"{name}: {text}"
                        sock.sendto(msg.encode(), (peer_ip, BROADCAST_PORT))
                        print("\033[31mMessage Sent!\033[0m")
                    else:
                        print("User does not exist")
                except:
                    print("Unknown command")

